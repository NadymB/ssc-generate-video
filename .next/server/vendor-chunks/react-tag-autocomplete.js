"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-tag-autocomplete";
exports.ids = ["vendor-chunks/react-tag-autocomplete"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-tag-autocomplete/dist/ReactTags.cjs.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-tag-autocomplete/dist/ReactTags.cjs.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst KeyNames = {\n  Enter: \"Enter\",\n  Escape: \"Escape\",\n  Tab: \"Tab\",\n  Backspace: \"Backspace\",\n  UpArrow: \"ArrowUp\",\n  UpArrowCompat: \"Up\",\n  DownArrow: \"ArrowDown\",\n  DownArrowCompat: \"Down\",\n  PageDown: \"PageDown\",\n  PageUp: \"PageUp\"\n};\nconst NewOptionValue = Symbol(\"Create new tag\");\nconst NoOptionsValue = Symbol(\"No options\");\nconst VoidFn = () => void 0;\nconst GlobalContext = React.createContext(void 0);\nfunction arrayDiff(a, b) {\n  if (a === b) {\n    return [];\n  } else {\n    return a.filter((item) => !b.includes(item));\n  }\n}\nfunction isCaretAtStart(target) {\n  return target.selectionStart === 0 && target.selectionEnd === 0;\n}\nfunction isCaretAtEnd(target) {\n  const length = target.value.length;\n  return target.selectionStart === length && target.selectionEnd === length;\n}\nfunction rootId(id) {\n  return id;\n}\nfunction labelId(id) {\n  return `${id}-label`;\n}\nfunction comboBoxId(id) {\n  return `${id}-combobox`;\n}\nfunction inputId(id) {\n  return `${id}-input`;\n}\nfunction listBoxId(id) {\n  return `${id}-listbox`;\n}\nfunction optionId(id, tag) {\n  return `${id}-option-${tagToId(tag)}`;\n}\nfunction getNewTag(option, value) {\n  if ((option == null ? void 0 : option.value) === NewOptionValue && option.disabled === false) {\n    return { value, label: value };\n  }\n}\nfunction findSelectedOption(state) {\n  const tag = getNewTag(state.activeOption, state.value) || state.activeOption || matchTagExact(state.value, state.options);\n  return tag && !tag.disabled ? tag : void 0;\n}\nfunction loopOptionsIndex(next, size, min) {\n  const max = size - 1;\n  if (next > max) {\n    return min;\n  }\n  if (next < min) {\n    return max;\n  }\n  return next;\n}\nconst ReplaceRegExp = /%value%/;\nfunction replacePlaceholder(string, value) {\n  return string.replace(ReplaceRegExp, value);\n}\nfunction highlightText(text, query) {\n  const regexp = partialRegExp(query);\n  const matches = text.match(regexp);\n  if (matches) {\n    const match = matches[0];\n    const lastIndex = matches.index + match.length;\n    return [\n      text.slice(0, matches.index),\n      text.slice(matches.index, lastIndex),\n      text.slice(lastIndex)\n    ];\n  }\n}\nconst Whitespace = /\\s+/g;\nfunction tagToKey(tag) {\n  return `${String(tag.value)}-${tag.label}`;\n}\nfunction tagToId(tag) {\n  return tagToKey(tag).replace(Whitespace, \"_\");\n}\nfunction findTagIndex(tag, tags) {\n  return tags.findIndex(({ value }) => value === tag.value);\n}\nconst EscapeRegExp = /[-\\\\^$*+?.()|[\\]{}]/g;\nfunction escapeForRegExp(string) {\n  return string.replace(EscapeRegExp, \"\\\\$&\");\n}\nfunction partialRegExp(query) {\n  return new RegExp(escapeForRegExp(query), \"i\");\n}\nfunction exactRegExp(query) {\n  return new RegExp(`^${escapeForRegExp(query)}$`, \"i\");\n}\nfunction matchTagsPartial(query, suggestions) {\n  if (query) {\n    const regexp = partialRegExp(query);\n    return suggestions.filter((item) => regexp.test(item.label));\n  } else {\n    return [].concat(suggestions);\n  }\n}\nfunction matchTagExact(query, suggestions) {\n  const regexp = exactRegExp(query);\n  return suggestions.find((item) => regexp.test(item.label)) || null;\n}\nconst DisableAutoCompleteAttrs = {\n  autoComplete: \"off\",\n  autoCorrect: \"off\",\n  \"data-form-type\": \"other\",\n  spellCheck: false\n};\nfunction useInput({\n  allowBackspace,\n  ariaDescribedBy,\n  ariaErrorMessage,\n  delimiterKeys\n}) {\n  const { id, comboBoxRef, inputRef, isDisabled, isInvalid, managerRef } = React.useContext(GlobalContext);\n  const events = React.useMemo(() => {\n    const onChange = (e) => {\n      const value2 = e.currentTarget.value;\n      managerRef.current.updateInputValue(value2);\n      if (document.activeElement === inputRef.current) {\n        managerRef.current.listBoxExpand(value2);\n      }\n    };\n    const onFocus = () => {\n      managerRef.current.listBoxExpand();\n    };\n    const onBlur = (e) => {\n      var _a;\n      if (((_a = comboBoxRef.current) == null ? void 0 : _a.contains(e.relatedTarget)) === false) {\n        managerRef.current.listBoxCollapse();\n      }\n    };\n    const onClick = () => {\n      managerRef.current.listBoxExpand();\n    };\n    const onDownArrowKey = (e) => {\n      const { activeIndex, isExpanded: isExpanded2 } = managerRef.current.state;\n      if (isExpanded2) {\n        e.preventDefault();\n        managerRef.current.updateActiveIndex(activeIndex + 1);\n      } else if (isCaretAtEnd(e.currentTarget) || e.altKey) {\n        e.preventDefault();\n        managerRef.current.listBoxExpand();\n      }\n    };\n    const onUpArrowKey = (e) => {\n      const { activeIndex, isExpanded: isExpanded2 } = managerRef.current.state;\n      if (isExpanded2) {\n        e.preventDefault();\n        managerRef.current.updateActiveIndex(activeIndex - 1);\n      } else if (isCaretAtStart(e.currentTarget)) {\n        e.preventDefault();\n        managerRef.current.listBoxExpand();\n      }\n    };\n    const onPageDownKey = (e) => {\n      const { isExpanded: isExpanded2, options } = managerRef.current.state;\n      if (isExpanded2) {\n        e.preventDefault();\n        managerRef.current.updateActiveIndex(options.length - 1);\n      }\n    };\n    const onPageUpKey = (e) => {\n      if (managerRef.current.state.isExpanded) {\n        e.preventDefault();\n        managerRef.current.updateActiveIndex(0);\n      }\n    };\n    const onEscapeKey = () => {\n      if (managerRef.current.state.isExpanded) {\n        managerRef.current.listBoxCollapse();\n      } else {\n        managerRef.current.updateInputValue(\"\");\n      }\n    };\n    const onBackspaceKey = () => {\n      if (allowBackspace) {\n        const { value: value2, selected } = managerRef.current.state;\n        const lastTag = selected[selected.length - 1];\n        if (value2 === \"\" && lastTag) {\n          managerRef.current.selectTag(lastTag);\n        }\n      }\n    };\n    const onDelimiterKey = (e) => {\n      if (managerRef.current.state.isExpanded) {\n        e.preventDefault();\n        managerRef.current.selectTag();\n      }\n    };\n    const onKeyDown = (e) => {\n      if (e.key === KeyNames.UpArrow) return onUpArrowKey(e);\n      if (e.key === KeyNames.DownArrow) return onDownArrowKey(e);\n      if (e.key === KeyNames.PageUp) return onPageUpKey(e);\n      if (e.key === KeyNames.PageDown) return onPageDownKey(e);\n      if (e.key === KeyNames.Escape) return onEscapeKey();\n      if (e.key === KeyNames.Backspace) return onBackspaceKey();\n      if (delimiterKeys.includes(e.key)) return onDelimiterKey(e);\n    };\n    return { onBlur, onChange, onClick, onFocus, onKeyDown };\n  }, [allowBackspace, comboBoxRef, delimiterKeys, inputRef, managerRef]);\n  const { activeOption, isExpanded, value } = managerRef.current.state;\n  return {\n    ...DisableAutoCompleteAttrs,\n    \"aria-autocomplete\": \"list\",\n    \"aria-activedescendant\": activeOption ? optionId(id, activeOption) : void 0,\n    \"aria-controls\": listBoxId(id),\n    \"aria-describedby\": ariaDescribedBy || void 0,\n    \"aria-disabled\": isDisabled,\n    \"aria-errormessage\": isInvalid && ariaErrorMessage || void 0,\n    \"aria-invalid\": isInvalid,\n    \"aria-labelledby\": labelId(id),\n    \"aria-expanded\": isExpanded,\n    id: inputId(id),\n    onBlur: isDisabled ? VoidFn : events.onBlur,\n    onChange: isDisabled ? VoidFn : events.onChange,\n    onClick: isDisabled ? VoidFn : events.onClick,\n    onFocus: isDisabled ? VoidFn : events.onFocus,\n    onKeyDown: isDisabled ? VoidFn : events.onKeyDown,\n    ref: inputRef,\n    role: \"combobox\",\n    type: \"text\",\n    value\n  };\n}\nconst SizerStyles = {\n  position: \"absolute\",\n  width: 0,\n  height: 0,\n  visibility: \"hidden\",\n  overflow: \"scroll\",\n  whiteSpace: \"pre\"\n};\nconst StyleProps = [\n  \"font-family\",\n  \"font-size\",\n  \"font-style\",\n  \"font-weight\",\n  \"letter-spacing\",\n  \"text-transform\"\n];\nfunction useInputSizer({ allowResize = true, text }) {\n  const sizerRef = React.useRef(null);\n  const { inputRef } = React.useContext(GlobalContext);\n  const [width, setWidth] = React.useState(null);\n  React.useLayoutEffect(() => {\n    if (allowResize && inputRef.current && sizerRef.current && window.getComputedStyle) {\n      const inputStyle = window.getComputedStyle(inputRef.current);\n      StyleProps.forEach((prop) => {\n        const value = inputStyle.getPropertyValue(prop);\n        sizerRef.current.style.setProperty(prop, value);\n      });\n    }\n  }, [allowResize, inputRef, sizerRef]);\n  React.useLayoutEffect(() => {\n    var _a;\n    if (allowResize) {\n      const newWidth = Math.ceil(((_a = sizerRef.current) == null ? void 0 : _a.scrollWidth) ?? 0) + 2;\n      if (width !== newWidth) setWidth(newWidth);\n    }\n  }, [allowResize, text, width]);\n  return {\n    width,\n    sizerProps: {\n      ref: sizerRef,\n      style: SizerStyles\n    }\n  };\n}\nfunction useListBox() {\n  const { id, inputRef, listBoxRef, managerRef } = React.useContext(GlobalContext);\n  const scrollToTop = managerRef.current.state.activeIndex === -1;\n  const onFocus = React.useCallback(\n    (e) => {\n      var _a;\n      if (e.target !== inputRef.current) {\n        (_a = inputRef.current) == null ? void 0 : _a.focus({ preventScroll: true });\n      }\n    },\n    [inputRef]\n  );\n  React.useEffect(() => {\n    var _a;\n    if (scrollToTop) {\n      (_a = listBoxRef.current) == null ? void 0 : _a.scrollTo({ top: 0 });\n    }\n  }, [listBoxRef, scrollToTop]);\n  return {\n    \"aria-labelledby\": labelId(id),\n    id: listBoxId(id),\n    onFocus,\n    ref: listBoxRef,\n    role: \"listbox\",\n    tabIndex: -1\n  };\n}\nfunction useManager({\n  activateFirstOption,\n  allowNew,\n  collapseOnSelect,\n  newOptionText,\n  noOptionsText,\n  onAdd,\n  onDelete,\n  onCollapse,\n  onExpand,\n  onInput,\n  onShouldCollapse,\n  onShouldExpand,\n  onValidate,\n  selected,\n  suggestions,\n  suggestionsTransform\n}) {\n  const ref = React.useRef();\n  const [lastActiveOption, setLastActiveOption] = React.useState(null);\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n  const options = React.useMemo(() => {\n    const opts = suggestionsTransform(value, suggestions);\n    if (value) {\n      if (allowNew) {\n        opts.push({\n          disabled: onValidate ? !onValidate(value) : false,\n          label: newOptionText,\n          value: NewOptionValue\n        });\n      }\n      if (opts.length === 0) {\n        opts.push({\n          disabled: true,\n          label: noOptionsText,\n          value: NoOptionsValue\n        });\n      }\n    }\n    return opts;\n  }, [allowNew, newOptionText, noOptionsText, onValidate, suggestions, suggestionsTransform, value]);\n  const optionIndex = lastActiveOption ? findTagIndex(lastActiveOption, options) : -1;\n  const activeIndex = activateFirstOption ? Math.max(optionIndex, 0) : optionIndex;\n  const activeOption = options[activeIndex];\n  const state = {\n    activeIndex,\n    activeOption,\n    isExpanded,\n    options,\n    selected,\n    value\n  };\n  const flags = {\n    tagsAdded: ref.current ? arrayDiff(selected, ref.current.state.selected) : [],\n    tagsDeleted: ref.current ? arrayDiff(ref.current.state.selected, selected) : []\n  };\n  const api = {\n    listBoxCollapse(value2) {\n      if (!isExpanded) return;\n      if (onShouldCollapse ? onShouldCollapse(value2 ?? state.value) : true) {\n        setIsExpanded(false);\n        setLastActiveOption(null);\n        onCollapse == null ? void 0 : onCollapse();\n      }\n    },\n    listBoxExpand(value2) {\n      if (isExpanded) return;\n      if (onShouldExpand ? onShouldExpand(value2 ?? state.value) : true) {\n        setIsExpanded(true);\n        setLastActiveOption(options[activeIndex]);\n        onExpand == null ? void 0 : onExpand();\n      }\n    },\n    updateActiveIndex(index) {\n      const activeIndex2 = loopOptionsIndex(index, options.length, activateFirstOption ? 0 : -1);\n      setLastActiveOption(options[activeIndex2]);\n    },\n    updateInputValue(newValue) {\n      if (value !== newValue) {\n        setValue(newValue);\n        onInput == null ? void 0 : onInput(newValue);\n      }\n    },\n    selectTag(tag) {\n      tag ?? (tag = findSelectedOption(state));\n      if (tag) {\n        const tagIndex = findTagIndex(tag, state.selected);\n        if (tagIndex > -1) {\n          onDelete(tagIndex);\n        } else {\n          onAdd(tag);\n        }\n        if (collapseOnSelect) {\n          this.listBoxCollapse();\n        }\n        this.updateInputValue(\"\");\n      }\n    }\n  };\n  ref.current = { ...api, flags, state };\n  return ref;\n}\nfunction useOption(index) {\n  const { id, inputRef, listBoxRef, managerRef } = React.useContext(GlobalContext);\n  const optionRef = React.useRef(null);\n  const option = managerRef.current.state.options[index];\n  const active = index === managerRef.current.state.activeIndex;\n  const disabled = option.disabled ?? false;\n  const selected = findTagIndex(option, managerRef.current.state.selected) > -1;\n  const onClick = React.useCallback(() => {\n    var _a;\n    managerRef.current.selectTag();\n    (_a = inputRef.current) == null ? void 0 : _a.focus();\n  }, [inputRef, managerRef]);\n  const onMouseDown = React.useCallback(() => {\n    if (index !== managerRef.current.state.activeIndex) {\n      managerRef.current.updateActiveIndex(index);\n    }\n  }, [index, managerRef]);\n  useScrollIntoView(optionRef, listBoxRef, active);\n  return {\n    option: {\n      ...option,\n      active,\n      disabled,\n      index,\n      selected\n    },\n    optionProps: {\n      \"aria-disabled\": disabled,\n      \"aria-posinset\": index + 1,\n      \"aria-selected\": disabled ? void 0 : selected,\n      \"aria-setsize\": managerRef.current.state.options.length,\n      id: optionId(id, option),\n      onClick,\n      onMouseDown,\n      ref: optionRef,\n      role: \"option\",\n      tabIndex: -1\n    }\n  };\n}\nfunction usePublicAPI({ inputRef, managerRef }) {\n  const api = React.useRef({\n    input: {\n      blur() {\n        var _a;\n        (_a = inputRef.current) == null ? void 0 : _a.blur();\n      },\n      focus() {\n        var _a;\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      },\n      get value() {\n        return managerRef.current.state.value;\n      },\n      set value(value) {\n        if (typeof value !== \"string\") {\n          value = String(value);\n        }\n        managerRef.current.updateInputValue(value);\n      }\n    },\n    listBox: {\n      collapse() {\n        managerRef.current.listBoxCollapse();\n      },\n      expand() {\n        managerRef.current.listBoxExpand();\n      },\n      get activeOption() {\n        return managerRef.current.state.activeOption;\n      },\n      get isExpanded() {\n        return managerRef.current.state.isExpanded;\n      }\n    },\n    select(tag) {\n      managerRef.current.selectTag(tag);\n    }\n  });\n  return api.current;\n}\nfunction useRoot({ onBlur, onFocus }) {\n  const [isActive, setIsActive] = React.useState(false);\n  const { id, inputRef, rootRef } = React.useContext(GlobalContext);\n  const rootProps = React.useMemo(() => {\n    return {\n      \"aria-describedby\": labelId(id),\n      id: rootId(id),\n      onFocus() {\n        setIsActive(true);\n        onFocus == null ? void 0 : onFocus();\n      },\n      onBlur() {\n        var _a;\n        if (!((_a = rootRef.current) == null ? void 0 : _a.contains(document.activeElement))) {\n          setIsActive(false);\n          onBlur == null ? void 0 : onBlur();\n        }\n      },\n      onClick() {\n        var _a;\n        if (document.activeElement === rootRef.current) {\n          (_a = inputRef.current) == null ? void 0 : _a.focus();\n        }\n      },\n      ref: rootRef,\n      tabIndex: -1\n    };\n  }, [inputRef, id, onBlur, onFocus, rootRef]);\n  return {\n    isActive,\n    rootProps\n  };\n}\nfunction useScrollIntoView(targetRef, containerRef, shouldScroll) {\n  React.useEffect(() => {\n    var _a, _b, _c, _d;\n    if (shouldScroll) {\n      const targetHeight = (_a = targetRef.current) == null ? void 0 : _a.offsetHeight;\n      const targetOffset = (_b = targetRef.current) == null ? void 0 : _b.offsetTop;\n      const containerHeight = (_c = containerRef.current) == null ? void 0 : _c.offsetHeight;\n      const containerScroll = (_d = containerRef.current) == null ? void 0 : _d.scrollTop;\n      if (targetOffset < containerScroll) {\n        containerRef.current.scrollTo(0, targetOffset);\n      }\n      if (targetOffset + targetHeight > containerScroll + containerHeight) {\n        containerRef.current.scrollTo(0, targetOffset + targetHeight - containerHeight);\n      }\n    }\n  }, [shouldScroll, containerRef, targetRef]);\n}\nfunction useSelectedTag(index, title) {\n  const { isDisabled, managerRef } = React.useContext(GlobalContext);\n  const tag = managerRef.current.state.selected[index];\n  const onClick = React.useCallback(() => managerRef.current.selectTag(tag), [managerRef, tag]);\n  return {\n    tag,\n    tagProps: {\n      \"aria-disabled\": isDisabled,\n      title: replacePlaceholder(title, tag.label),\n      onClick: isDisabled ? VoidFn : onClick\n    }\n  };\n}\nfunction useTagList({ label }) {\n  var _a;\n  const { rootRef, managerRef } = React.useContext(GlobalContext);\n  const listRef = React.useRef();\n  const tagDeleted = managerRef.current.flags.tagsDeleted[0];\n  const isFocusInList = (_a = listRef.current) == null ? void 0 : _a.contains(document.activeElement);\n  React.useLayoutEffect(() => {\n    var _a2, _b;\n    if (tagDeleted) {\n      const isFocusInListNow = (_a2 = listRef.current) == null ? void 0 : _a2.contains(document.activeElement);\n      if (isFocusInList && !isFocusInListNow) {\n        (_b = rootRef.current) == null ? void 0 : _b.focus({ preventScroll: true });\n      }\n    }\n  }, [isFocusInList, listRef, rootRef, tagDeleted]);\n  return { ref: listRef, \"aria-label\": label };\n}\nconst VisuallyHiddenStyles = {\n  position: \"absolute\",\n  width: 1,\n  height: 1,\n  left: -9999,\n  overflow: \"hidden\",\n  clip: \"rect(0 0 0 0)\"\n};\nfunction Announcements({ ariaAddedText, ariaDeletedText }) {\n  const { managerRef } = React.useContext(GlobalContext);\n  const logsRef = React.useRef([]);\n  managerRef.current.flags.tagsAdded.forEach((tag) => {\n    logsRef.current.push(replacePlaceholder(ariaAddedText, tag.label));\n  });\n  managerRef.current.flags.tagsDeleted.forEach((tag) => {\n    logsRef.current.push(replacePlaceholder(ariaDeletedText, tag.label));\n  });\n  return /* @__PURE__ */ React.createElement(\"div\", { \"aria-live\": \"polite\", \"aria-relevant\": \"additions\", role: \"status\", style: VisuallyHiddenStyles }, logsRef.current.join(\"\\n\"));\n}\nfunction ComboBox({ children }) {\n  const { classNames, comboBoxRef, id } = React.useContext(GlobalContext);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: classNames.comboBox, id: comboBoxId(id), ref: comboBoxRef }, children);\n}\nconst DefaultHighlight = ({ classNames, text }) => {\n  return /* @__PURE__ */ React.createElement(\"mark\", { className: classNames.highlight }, text);\n};\nfunction Highlight({ option, query, render = DefaultHighlight }) {\n  const { classNames } = React.useContext(GlobalContext);\n  if (option.value === NewOptionValue || option.value === NoOptionsValue) {\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, replacePlaceholder(option.label, query));\n  }\n  if (query) {\n    const result = highlightText(option.label, query);\n    if (result) {\n      const highlighted = render({ text: result[1], classNames });\n      return /* @__PURE__ */ React.createElement(React.Fragment, null, result[0], highlighted, result[2]);\n    }\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, option.label);\n}\nconst MemoizedHighlight = React.memo(Highlight);\nconst DefaultInput = ({ classNames, inputWidth, ...inputProps }) => {\n  return /* @__PURE__ */ React.createElement(\"input\", { className: classNames.input, style: { width: inputWidth }, ...inputProps });\n};\nfunction Input({\n  allowBackspace = true,\n  allowResize = true,\n  ariaDescribedBy,\n  ariaErrorMessage,\n  delimiterKeys,\n  placeholderText,\n  render = DefaultInput\n}) {\n  const { classNames } = React.useContext(GlobalContext);\n  const { value, ...inputProps } = useInput({\n    allowBackspace,\n    ariaDescribedBy,\n    ariaErrorMessage,\n    delimiterKeys\n  });\n  const text = value.length < placeholderText.length ? placeholderText : value;\n  const { width, sizerProps } = useInputSizer({ allowResize, text });\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, render({\n    classNames,\n    inputWidth: width,\n    placeholder: placeholderText,\n    value,\n    ...inputProps\n  }), allowResize ? /* @__PURE__ */ React.createElement(\"div\", { ...sizerProps }, text) : null);\n}\nconst DefaultLabel = ({ children, classNames, id }) => {\n  return /* @__PURE__ */ React.createElement(\"div\", { className: classNames.label, id }, children);\n};\nfunction Label({ children, render = DefaultLabel }) {\n  const { classNames, id } = React.useContext(GlobalContext);\n  return render({ children, classNames, id: labelId(id) });\n}\nconst DefaultListBox = ({ children, classNames, ...listBoxProps }) => {\n  return /* @__PURE__ */ React.createElement(\"div\", { className: classNames.listBox, ...listBoxProps }, children);\n};\nfunction ListBox({ children, render = DefaultListBox }) {\n  const { classNames, managerRef } = React.useContext(GlobalContext);\n  const listBoxProps = useListBox();\n  if (!managerRef.current.state.isExpanded || React.Children.count(children) === 0) return null;\n  return render({ children, classNames, ...listBoxProps });\n}\nconst DefaultOption = ({ children, classNames, option, ...optionProps }) => {\n  const classes = [classNames.option];\n  if (option.active) classes.push(classNames.optionIsActive);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: classes.join(\" \"), ...optionProps }, children);\n};\nfunction Option({ children, index, render = DefaultOption }) {\n  const { classNames } = React.useContext(GlobalContext);\n  const { option, optionProps } = useOption(index);\n  return render({ classNames, children, option, ...optionProps });\n}\nconst DefaultRoot = ({\n  children,\n  classNames,\n  isActive,\n  isDisabled,\n  isInvalid,\n  ...rootProps\n}) => {\n  const classes = [classNames.root];\n  if (isActive) classes.push(classNames.rootIsActive);\n  if (isDisabled) classes.push(classNames.rootIsDisabled);\n  if (isInvalid) classes.push(classNames.rootIsInvalid);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: classes.join(\" \"), ...rootProps }, children);\n};\nfunction Root({ children, onBlur, onFocus, render = DefaultRoot }) {\n  const { classNames, isDisabled, isInvalid } = React.useContext(GlobalContext);\n  const { isActive, rootProps } = useRoot({ onBlur, onFocus });\n  return render({ children, classNames, isActive, isDisabled, isInvalid, ...rootProps });\n}\nconst DefaultTag = ({ classNames, tag, ...tagProps }) => {\n  return /* @__PURE__ */ React.createElement(\"button\", { type: \"button\", className: classNames.tag, ...tagProps }, /* @__PURE__ */ React.createElement(\"span\", { className: classNames.tagName }, tag.label));\n};\nfunction Tag({ render = DefaultTag, index, title }) {\n  const { classNames } = React.useContext(GlobalContext);\n  const { tag, tagProps } = useSelectedTag(index, title);\n  return render({ classNames, tag, ...tagProps });\n}\nconst DefaultTagList = ({\n  children,\n  classNames,\n  ...tagListProps\n}) => {\n  return /* @__PURE__ */ React.createElement(\"ul\", { className: classNames.tagList, ...tagListProps, role: \"list\" }, React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      return /* @__PURE__ */ React.createElement(\"li\", { className: classNames.tagListItem, key: child.key, role: \"listitem\" }, child);\n    }\n  }));\n};\nfunction TagList({ children, label, render = DefaultTagList }) {\n  const { classNames } = React.useContext(GlobalContext);\n  const tagListProps = useTagList({ label });\n  return render({ classNames, children, ...tagListProps });\n}\nconst DefaultClassNames = {\n  root: \"react-tags\",\n  rootIsActive: \"is-active\",\n  rootIsDisabled: \"is-disabled\",\n  rootIsInvalid: \"is-invalid\",\n  label: \"react-tags__label\",\n  tagList: \"react-tags__list\",\n  tagListItem: \"react-tags__list-item\",\n  tag: \"react-tags__tag\",\n  tagName: \"react-tags__tag-name\",\n  comboBox: \"react-tags__combobox\",\n  input: \"react-tags__combobox-input\",\n  listBox: \"react-tags__listbox\",\n  option: \"react-tags__listbox-option\",\n  optionIsActive: \"is-active\",\n  highlight: \"react-tags__listbox-option-highlight\"\n};\nconst DefaultDelimiterKeys = [KeyNames.Enter];\nfunction ReactTags({\n  activateFirstOption = false,\n  allowBackspace = true,\n  allowNew = false,\n  allowResize = true,\n  ariaAddedText = \"Added tag %value%\",\n  ariaDescribedBy,\n  ariaErrorMessage,\n  ariaDeletedText = \"Removed tag %value%\",\n  classNames = DefaultClassNames,\n  collapseOnSelect = false,\n  deleteButtonText = \"Remove %value% from the list\",\n  delimiterKeys = DefaultDelimiterKeys,\n  id = \"react-tags\",\n  isDisabled = false,\n  isInvalid = false,\n  labelText = \"Select tags\",\n  newOptionText = \"Add %value%\",\n  noOptionsText = \"No options found for %value%\",\n  onAdd,\n  onBlur,\n  onCollapse,\n  onDelete,\n  onExpand,\n  onFocus,\n  onInput,\n  onShouldCollapse,\n  onShouldExpand,\n  onValidate,\n  placeholderText = \"Add a tag\",\n  renderHighlight,\n  renderInput,\n  renderLabel,\n  renderListBox,\n  renderOption,\n  renderRoot,\n  renderTag,\n  renderTagList,\n  selected = [],\n  suggestions = [],\n  suggestionsTransform = matchTagsPartial,\n  tagListLabelText = \"Selected tags\"\n}, ref) {\n  const comboBoxRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const listBoxRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const managerRef = useManager({\n    activateFirstOption,\n    allowNew,\n    collapseOnSelect,\n    newOptionText,\n    noOptionsText,\n    onAdd,\n    onDelete,\n    onCollapse,\n    onExpand,\n    onInput,\n    onShouldCollapse,\n    onShouldExpand,\n    onValidate,\n    selected,\n    suggestions,\n    suggestionsTransform\n  });\n  const publicAPI = usePublicAPI({ inputRef, managerRef });\n  if (ref) {\n    if (typeof ref === \"function\") {\n      ref(publicAPI);\n    } else {\n      ref.current = publicAPI;\n    }\n  }\n  return /* @__PURE__ */ React.createElement(\n    GlobalContext.Provider,\n    {\n      value: {\n        classNames,\n        comboBoxRef,\n        id,\n        inputRef,\n        isDisabled,\n        isInvalid,\n        listBoxRef,\n        managerRef,\n        rootRef\n      }\n    },\n    /* @__PURE__ */ React.createElement(Root, { onBlur, onFocus, render: renderRoot }, /* @__PURE__ */ React.createElement(Label, { render: renderLabel }, labelText), /* @__PURE__ */ React.createElement(TagList, { render: renderTagList, label: tagListLabelText }, managerRef.current.state.selected.map((tag, index) => /* @__PURE__ */ React.createElement(Tag, { key: tagToKey(tag), index, render: renderTag, title: deleteButtonText }))), /* @__PURE__ */ React.createElement(ComboBox, null, /* @__PURE__ */ React.createElement(\n      Input,\n      {\n        allowBackspace,\n        allowResize,\n        ariaDescribedBy,\n        ariaErrorMessage,\n        delimiterKeys,\n        placeholderText,\n        render: renderInput\n      }\n    ), /* @__PURE__ */ React.createElement(ListBox, { render: renderListBox }, managerRef.current.state.options.map((option, index) => /* @__PURE__ */ React.createElement(Option, { key: tagToKey(option), index, render: renderOption }, /* @__PURE__ */ React.createElement(\n      MemoizedHighlight,\n      {\n        option,\n        query: managerRef.current.state.value,\n        render: renderHighlight\n      }\n    ))))), /* @__PURE__ */ React.createElement(Announcements, { ariaAddedText, ariaDeletedText }))\n  );\n}\nconst ReactTagsWithRef = React.forwardRef(ReactTags);\nexports.ReactTags = ReactTagsWithRef;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-tag-autocomplete/dist/ReactTags.cjs.js\n");

/***/ })

};
;